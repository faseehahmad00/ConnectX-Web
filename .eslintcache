[{"/home/anonymous/ReactProjects/connectx-web/src/index.js":"1","/home/anonymous/ReactProjects/connectx-web/src/Components/Contacts.js":"2","/home/anonymous/ReactProjects/connectx-web/src/Components/Chathome.js":"3","/home/anonymous/ReactProjects/connectx-web/src/Components/ChatList.js":"4","/home/anonymous/ReactProjects/connectx-web/src/Components/Avatar.js":"5","/home/anonymous/ReactProjects/connectx-web/src/App.js":"6","/home/anonymous/ReactProjects/connectx-web/src/reportWebVitals.js":"7","/home/anonymous/ReactProjects/connectx-web/src/Components/ChatItem.js":"8","/home/anonymous/ReactProjects/connectx-web/src/Data/ContactData.js":"9","/home/anonymous/ReactProjects/connectx-web/src/Components/ChatScreen.js":"10","/home/anonymous/ReactProjects/connectx-web/src/Data/Message.js":"11"},{"size":500,"mtime":1612272909502,"results":"12","hashOfConfig":"13"},{"size":1152,"mtime":1612816223207,"results":"14","hashOfConfig":"13"},{"size":268,"mtime":1612299058212,"results":"15","hashOfConfig":"13"},{"size":1548,"mtime":1612297956733,"results":"16","hashOfConfig":"13"},{"size":3040,"mtime":1612276907093,"results":"17","hashOfConfig":"13"},{"size":1092,"mtime":1612708700145,"results":"18","hashOfConfig":"13"},{"size":362,"mtime":1612272909502,"results":"19","hashOfConfig":"13"},{"size":4165,"mtime":1612300240781,"results":"20","hashOfConfig":"13"},{"size":2585,"mtime":1612704784441,"results":"21","hashOfConfig":"13"},{"size":3338,"mtime":1612817636438,"results":"22","hashOfConfig":"13"},{"size":4721,"mtime":1612474651479,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1438wrl",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"33"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"/home/anonymous/ReactProjects/connectx-web/src/index.js",[],["52","53"],"/home/anonymous/ReactProjects/connectx-web/src/Components/Contacts.js",["54"],"import '../App.css';\nimport ChatList from \"./ChatList\";\nimport ContactData from \"../Data/ContactData\";\nimport { useEffect, useState } from 'react';\nimport searchicon from '../Images/searchicon.svg';\n\nexport default function Contacts(){\n    let [keyword,setkeyword] = useState('');\n    let [contacts,setContacts] = useState([]);\n\n    useEffect(()=>{\n        let filteredContacts =  [...ContactData];\n        console.log(filteredContacts);\n        let newfilter = filteredContacts.filter(m => {\n            return m.title.toLowerCase().replace(/\\s/g, '').includes(keyword.toLowerCase().replace(/\\s/g, '')) ;\n        })\n        setContacts(newfilter);\n    },[keyword])\n    return(\n        <div className='contacts'>\n            <div className=\"contactsHeader\">\n                <div className=\"searchbar\">\n                <img src={searchicon} style={{height:'15px',width:'15px'}}/>\n                <input type=\"text\" placeholder=\"search\" value={keyword} onChange={(event)=>setkeyword(event.target.value)}/>\n                </div>\n            </div>\n            <div>\n            <ChatList dataSource={contacts} />\n            </div>\n        </div>\n    )\n}",["55","56"],"/home/anonymous/ReactProjects/connectx-web/src/Components/Chathome.js",[],["57","58"],"/home/anonymous/ReactProjects/connectx-web/src/Components/ChatList.js",[],"/home/anonymous/ReactProjects/connectx-web/src/Components/Avatar.js",[],"/home/anonymous/ReactProjects/connectx-web/src/App.js",[],["59","60"],"/home/anonymous/ReactProjects/connectx-web/src/reportWebVitals.js",[],"/home/anonymous/ReactProjects/connectx-web/src/Components/ChatItem.js",[],"/home/anonymous/ReactProjects/connectx-web/src/Data/ContactData.js",[],"/home/anonymous/ReactProjects/connectx-web/src/Components/ChatScreen.js",["61","62"],"import { useParams } from \"react-router-dom\";\nimport './ChatScreen.css';\nimport { format } from 'date-fns';\nimport sending from '../Images/send.svg';\nimport { useEffect, useState } from \"react\";\nimport { AccessAlarm, ThreeDRotation } from '@material-ui/icons';\n\n\nexport default function ChatScreen({ messages, userid }) {\n    const { id } = useParams();\n    let [msgs, setmsgs] = useState([]);\n    let [text, settext] = useState('');\n    let [disabled,setDisabled] = useState(true);\n\n    function updateScroll() {\n        let element = document.getElementById(\"bodyid\");\n        element.scrollTop = element.scrollHeight;\n    }\n\n\n    useEffect(() => {\n        setmsgs(messages);\n    }, [messages]);\n\n    useEffect(() => {\n        return () => {\n            updateScroll();\n        }\n    })\n\n    let handleChange = (event) => {\n        settext(event.target.value);\n        console.log(event.target.value);\n        if(event.target.value === ''){\n            setDisabled(true);\n        }\n        if(event.target.value !== ''){\n            setDisabled(false);\n        }\n    }\n\n    let sendMessage = () => {\n        if(text !== ''){\n        let newMessages = [...msgs];\n        newMessages.push({\n            id: new Date().getMilliseconds().toString(),  //unique id \n            createdAt: new Date(),\n            sender: '1',\n            messagetext: `${text}`,\n        });\n        setmsgs(newMessages);\n        settext('');\n        updateScroll();  \n        setDisabled(true);    \n    }\n}\n    return (\n        <div className=\"Chatscreen\">\n            <div className=\"header\">\n                <img className=\"headerimg\" src=\"https://source.unsplash.com/random/200x202/\" alt=\".\" />\n                <h3>{id}</h3>\n            </div>\n            <div className=\"body\" id=\"bodyid\">\n                {msgs.map(m => {\n                    let date = format(m.createdAt, \"MMM-dd-yy  HH:mm\");\n                    return (\n                        <div id=\"msg\" className={m.sender === userid ? \"messagecomponentright\" : \"messagecomponentleft\"} key={m.id}>\n                            <img className=\"avatar\"\n                                src={m.sender === userid ? \"https://source.unsplash.com/random/500x102/\" : \"https://source.unsplash.com/random/200x202/\"} alt=\".\" />\n                            <div className=\"messagebody\">\n                                <div className={m.sender === userid ? \"messageright\" : \"messageleft\"}>\n                                    <p className=\"messagename\">{m.sender === userid ? 'you' : `${id}`}</p>\n                                    <p className=\"messagetext\">{m.messagetext}</p>\n                                    <p className=\"messagetime\">{date}</p>\n                                </div>\n                            </div>\n                        </div>\n                    );\n                })\n\n                }\n            </div>\n            <div className=\"form\">\n                <textarea\n                    type=\"text\"\n                    required value={text} onChange={handleChange} placeholder='new message here' />\n             {!disabled && <button onClick={() => { sendMessage() }} disabled={disabled}>\n                    <img style={{ height: '20px', width: '20px', }} alt='send' src={sending} />\n                </button>\n                }\n            </div>\n        </div>\n\n\n    );\n}\n\n\n\n","/home/anonymous/ReactProjects/connectx-web/src/Data/Message.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":23,"column":17,"nodeType":"69","endLine":23,"endColumn":77},{"ruleId":"63","replacedBy":"70"},{"ruleId":"65","replacedBy":"71"},{"ruleId":"63","replacedBy":"72"},{"ruleId":"65","replacedBy":"73"},{"ruleId":"63","replacedBy":"74"},{"ruleId":"65","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":6,"column":10,"nodeType":"78","messageId":"79","endLine":6,"endColumn":21},{"ruleId":"76","severity":1,"message":"80","line":6,"column":23,"nodeType":"78","messageId":"79","endLine":6,"endColumn":37},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["81"],["82"],["81"],["82"],["81"],["82"],"no-unused-vars","'AccessAlarm' is defined but never used.","Identifier","unusedVar","'ThreeDRotation' is defined but never used.","no-global-assign","no-unsafe-negation"]